Są 3 etapy gita: Working Directory, Staging i Repo

git init - inicjuje nowe Repo
git status - sprawdza status plików w working directory i Staging
git add file-name - dodaje file do Stage
git diff - pokazuje różnicę pomiędzy WD a Staging
git -m commit "message" - Commituje Stagea
git log - sprawdza historie Commitów

git checkout HEAD file-name - Discards changes in the WD.
git reset HEAD file-name - Unstages file changes in the Staging.
git reset SHA - resets previous commit in your commit history.

git branch - sprawdza w którym Branchu jesteśmy
git checkout branch-name - swapuje pomiedzy Branchami
git merge branch-name - Merguje Brancha z Masterem
git branch -d branch-name - usuwa Brancha - po zMergowaniu dobrze jest go usunąć

* Wszystkie commity do mastera są dodawane też do branchy (?)
* Merge conflict - występuje jak się chce zMergować tę samą linijkę, edytowaną w kilku branchach 
		 - wystarczy wtedy przyjść do pliku txt i wybrać która ma pozostać

git clone repo-name local-name - klonuje projekt z Repo do nowego WD
git remote -v - listuje gitowe projekty remote (origin i fetcha)
git fetch - aktualizuje (?) WD do najnowszej wersji z Repo - tyle że ta nowa wersja to nie jest nigdy Master, 
	    a origin/master. Żeby local i remote mastery były takie same trzeba je zmergować
git merge origin/master - Merguje to co w Fetchu z WD
git push origin branch-name - pushuje brancha do origin remote

git rebase -i --root
exec git commit --amend --author="mmarszal7 <mati.m7@o2.pl>" -C HEAD
exec git commit --amend --date="Mon Jan 01 00:00 2017 +0100" -C HEAD
git push origin master --force
